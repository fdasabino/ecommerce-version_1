[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "text_type",
        "importPath": "six",
        "description": "six",
        "isExtraImport": true,
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_current_site",
        "importPath": "django.contrib.sites.shortcuts",
        "description": "django.contrib.sites.shortcuts",
        "isExtraImport": true,
        "detail": "django.contrib.sites.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_text",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "orders.views",
        "description": "orders.views",
        "isExtraImport": true,
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "user_orders",
        "importPath": "orders.views",
        "description": "orders.views",
        "isExtraImport": true,
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "DeliveryOptions",
        "importPath": "checkout.models",
        "description": "checkout.models",
        "isExtraImport": true,
        "detail": "checkout.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "PayPalHttpClient",
        "importPath": "paypalcheckoutsdk.core",
        "description": "paypalcheckoutsdk.core",
        "isExtraImport": true,
        "detail": "paypalcheckoutsdk.core",
        "documentation": {}
    },
    {
        "label": "SandboxEnvironment",
        "importPath": "paypalcheckoutsdk.core",
        "description": "paypalcheckoutsdk.core",
        "isExtraImport": true,
        "detail": "paypalcheckoutsdk.core",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Basket",
        "importPath": "basket.basket",
        "description": "basket.basket",
        "isExtraImport": true,
        "detail": "basket.basket",
        "documentation": {}
    },
    {
        "label": "Basket",
        "importPath": "basket.basket",
        "description": "basket.basket",
        "isExtraImport": true,
        "detail": "basket.basket",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrdersGetRequest",
        "importPath": "paypalcheckoutsdk.orders",
        "description": "paypalcheckoutsdk.orders",
        "isExtraImport": true,
        "detail": "paypalcheckoutsdk.orders",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "env",
        "description": "env",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "debug_toolbar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "debug_toolbar",
        "description": "debug_toolbar",
        "detail": "debug_toolbar",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "mptt.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mptt.fields",
        "description": "mptt.fields",
        "detail": "mptt.fields",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "skip",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "product_all",
        "importPath": "store.views",
        "description": "store.views",
        "isExtraImport": true,
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "MPTTModelAdmin",
        "importPath": "mptt.admin",
        "description": "mptt.admin",
        "isExtraImport": true,
        "detail": "mptt.admin",
        "documentation": {}
    },
    {
        "label": "MPTTModel",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "TreeForeignKey",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0001_initial",
        "description": "account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AccountConfig",
        "kind": 6,
        "importPath": "account.apps",
        "description": "account.apps",
        "peekOfCode": "class AccountConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'account'",
        "detail": "account.apps",
        "documentation": {}
    },
    {
        "label": "UserAddressForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class UserAddressForm(forms.ModelForm):\n    class Meta:\n        model = Address\n        fields = [\"full_name\", \"phone\", \"address_line\", \"address_line2\", \"town_city\", \"postcode\"]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields[\"full_name\"].widget.attrs.update(\n            {\"class\": \"form-control mb-2 account-form\", \"placeholder\": \"Full Name\"}\n        )\n        self.fields[\"phone\"].widget.attrs.update({\"class\": \"form-control mb-2 account-form\", \"placeholder\": \"Phone\"})",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class UserLoginForm(AuthenticationForm):\n    username = forms.CharField(\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control mb-3\",\n                \"placeholder\": \"Username\",\n                \"id\": \"login-username\",\n            }\n        )\n    )",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class RegistrationForm(forms.ModelForm):\n    user_name = forms.CharField(\n        label=\"Full Name\",\n        min_length=4,\n        max_length=50,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control mb-3\",\n                \"placeholder\": \"Full Name\",\n                \"id\": \"form-lastname\",",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "PwdResetForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class PwdResetForm(PasswordResetForm):\n    email = forms.EmailField(\n        max_length=254,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control mb-3\",\n                \"placeholder\": \"Email\",\n                \"id\": \"form-email\",\n            }\n        ),",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "PwdResetConfirmForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class PwdResetConfirmForm(SetPasswordForm):\n    new_password1 = forms.CharField(\n        label=\"New password\",\n        widget=forms.PasswordInput(\n            attrs={\n                \"class\": \"form-control mb-3\",\n                \"placeholder\": \"New Password\",\n                \"id\": \"form-newpass\",\n            }\n        ),",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "UserEditForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class UserEditForm(forms.ModelForm):\n    email = forms.EmailField(\n        label=\"Account email (can not be changed)\",\n        max_length=200,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control mb-3\",\n                \"placeholder\": \"email\",\n                \"id\": \"form-email\",\n                \"readonly\": \"readonly\",",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "CustomAccountManager",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class CustomAccountManager(BaseUserManager):\n    \"\"\"\n    Manages user accounts\n    \"\"\"\n    def create_superuser(self, email, name, password, **other_fields):\n        other_fields.setdefault(\"is_staff\", True)\n        other_fields.setdefault(\"is_superuser\", True)\n        other_fields.setdefault(\"is_active\", True)\n        if other_fields.get(\"is_staff\") is not True:\n            raise ValueError(\"Superuser must be assigned to is_staff=True.\")",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class Customer(AbstractBaseUser, PermissionsMixin):\n    \"\"\"\n    Customer table\n    \"\"\"\n    email = models.EmailField(_(\"email address\"), unique=True)\n    name = models.CharField(max_length=150)\n    mobile = models.CharField(max_length=20, blank=True)\n    is_active = models.BooleanField(default=False)\n    is_staff = models.BooleanField(default=False)\n    created = models.DateTimeField(auto_now_add=True)",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class Address(models.Model):\n    \"\"\"\n    Address table\n    \"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    customer = models.ForeignKey(Customer, verbose_name=_(\"Customer\"), on_delete=models.CASCADE)\n    full_name = models.CharField(_(\"Full Name\"), max_length=150)\n    phone = models.CharField(_(\"Phone Number\"), max_length=50)\n    postcode = models.CharField(_(\"Postcode\"), max_length=50)\n    address_line = models.CharField(_(\"Address Line 1\"), max_length=255)",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "AccountActivationTokenGenerator",
        "kind": 6,
        "importPath": "account.tokens",
        "description": "account.tokens",
        "peekOfCode": "class AccountActivationTokenGenerator(PasswordResetTokenGenerator):\n    def _make_hash_value(self, user, timestamp):\n        return text_type(user.pk) + text_type(timestamp) + text_type(user.is_active)\naccount_activation_token = AccountActivationTokenGenerator()",
        "detail": "account.tokens",
        "documentation": {}
    },
    {
        "label": "account_activation_token",
        "kind": 5,
        "importPath": "account.tokens",
        "description": "account.tokens",
        "peekOfCode": "account_activation_token = AccountActivationTokenGenerator()",
        "detail": "account.tokens",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "account.urls",
        "description": "account.urls",
        "peekOfCode": "app_name = \"account\"\nurlpatterns = [\n    path(\n        \"login/\",\n        auth_views.LoginView.as_view(template_name=\"account/user/login.html\", form_class=UserLoginForm),\n        name=\"login\",\n    ),\n    path(\n        \"logout/\",\n        auth_views.LogoutView.as_view(next_page=\"/\"),",
        "detail": "account.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "account.urls",
        "description": "account.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"login/\",\n        auth_views.LoginView.as_view(template_name=\"account/user/login.html\", form_class=UserLoginForm),\n        name=\"login\",\n    ),\n    path(\n        \"logout/\",\n        auth_views.LogoutView.as_view(next_page=\"/\"),\n        name=\"logout\",",
        "detail": "account.urls",
        "documentation": {}
    },
    {
        "label": "wishlist",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def wishlist(request):\n    products = Product.objects.filter(users_wishlist=request.user)\n    return render(request, \"account/user/user_wishlist.html\", {\"wishlist\": products})\n@login_required\ndef add_to_wishlist(request, id):\n    product = get_object_or_404(Product, id=id)\n    if product.users_wishlist.filter(id=request.user.id).exists():\n        product.users_wishlist.remove(request.user)\n        messages.add_message(request, messages.WARNING, product.title + \" has been removed from your Wishlist\")\n    else:",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "add_to_wishlist",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def add_to_wishlist(request, id):\n    product = get_object_or_404(Product, id=id)\n    if product.users_wishlist.filter(id=request.user.id).exists():\n        product.users_wishlist.remove(request.user)\n        messages.add_message(request, messages.WARNING, product.title + \" has been removed from your Wishlist\")\n    else:\n        product.users_wishlist.add(request.user)\n        messages.add_message(request, messages.SUCCESS, product.title + \" has been added to your Wishlist\")\n    return HttpResponseRedirect(request.META[\"HTTP_REFERER\"])\n@login_required",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def dashboard(request):\n    orders = user_orders(request)\n    return render(request, \"account/user/dashboard.html\", {\"section\": \"profile\", \"orders\": orders})\n@login_required\ndef edit_details(request):\n    if request.method == \"POST\":\n        user_form = UserEditForm(instance=request.user, data=request.POST)\n        if user_form.is_valid():\n            messages.add_message(request, messages.SUCCESS, \"Details updated successfully\")\n            user_form.save()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "edit_details",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def edit_details(request):\n    if request.method == \"POST\":\n        user_form = UserEditForm(instance=request.user, data=request.POST)\n        if user_form.is_valid():\n            messages.add_message(request, messages.SUCCESS, \"Details updated successfully\")\n            user_form.save()\n    else:\n        user_form = UserEditForm(instance=request.user)\n    return render(request, \"account/user/edit_details.html\", {\"user_form\": user_form})\n@login_required",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def delete_user(request):\n    user = Customer.objects.get(user_name=request.user)\n    user.is_active = False\n    user.save()\n    logout(request)\n    messages.add_message(request, messages.SUCCESS, \"Account deleted successfully\")\n    return redirect(\"account:delete_confirmation\")\ndef account_register(request):\n    if request.user.is_authenticated:\n        # message",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "account_register",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def account_register(request):\n    if request.user.is_authenticated:\n        # message\n        return redirect(\"account:dashboard\")\n    if request.method == \"POST\":\n        registerForm = RegistrationForm(request.POST)\n        if registerForm.is_valid():\n            return account_register_email(registerForm, request)\n    else:\n        registerForm = RegistrationForm()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "account_register_email",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def account_register_email(registerForm, request):\n    user = registerForm.save(commit=False)\n    user.email = registerForm.cleaned_data[\"email\"]\n    user.set_password(registerForm.cleaned_data[\"password\"])\n    user.is_active = False\n    user.save()\n    current_site = get_current_site(request)\n    subject = \"Activate your Account\"\n    message = render_to_string(\n        \"account/registration/account_activation_email.html\",",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "account_activate",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def account_activate(request, uidb64, token):\n    try:\n        uid = force_text(urlsafe_base64_decode(uidb64))\n        user = Customer.objects.get(pk=uid)\n    except (TypeError, ValueError, OverflowError):\n        user = None\n    if user is None or not account_activation_token.check_token(user, token):\n        return render(request, \"account/registration/activation_invalid.html\")\n    user.is_active = True\n    user.save()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "view_address",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def view_address(request):\n    addresses = Address.objects.filter(customer=request.user)\n    return render(request, \"account/user/addresses.html\", {\"addresses\": addresses})\n@login_required\ndef add_address(request):\n    if request.method == \"POST\":\n        address_form = UserAddressForm(data=request.POST)\n        if address_form.is_valid():\n            address_form = address_form.save(commit=False)\n            address_form.customer = request.user",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "add_address",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def add_address(request):\n    if request.method == \"POST\":\n        address_form = UserAddressForm(data=request.POST)\n        if address_form.is_valid():\n            address_form = address_form.save(commit=False)\n            address_form.customer = request.user\n            address_form.save()\n            return HttpResponseRedirect(reverse(\"account:addresses\"))\n    else:\n        address_form = UserAddressForm()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "edit_address",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def edit_address(request, id):\n    if request.method == \"POST\":\n        address = Address.objects.get(pk=id, customer=request.user)\n        address_form = UserAddressForm(instance=address, data=request.POST)\n        if address_form.is_valid():\n            address_form.save()\n            return HttpResponseRedirect(reverse(\"account:addresses\"))\n    else:\n        address = Address.objects.get(pk=id, customer=request.user)\n        address_form = UserAddressForm(instance=address)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "delete_address",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def delete_address(request, id):\n    address = Address.objects.filter(pk=id, customer=request.user).delete()\n    return redirect(\"account:addresses\")\n@login_required\ndef set_default(request, id):\n    Address.objects.filter(customer=request.user, default=True).update(default=False)\n    Address.objects.filter(pk=id, customer=request.user).update(default=True)\n    return redirect(\"account:addresses\")",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "set_default",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def set_default(request, id):\n    Address.objects.filter(customer=request.user, default=True).update(default=False)\n    Address.objects.filter(pk=id, customer=request.user).update(default=True)\n    return redirect(\"account:addresses\")",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "TestBasketView",
        "kind": 6,
        "importPath": "basket.tests.test_views",
        "description": "basket.tests.test_views",
        "peekOfCode": "class TestBasketView(TestCase):\n    def setUp(self):\n        User.objects.create(username=\"admin\")\n        Category.objects.create(name=\"django\", slug=\"django-beginners\")\n        Product.objects.create(\n            category_id=1,\n            title=\"django beginners\",\n            created_by_id=1,\n            slug=\"django-beginners\",\n            price=\"20.00\",",
        "detail": "basket.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BasketConfig",
        "kind": 6,
        "importPath": "basket.apps",
        "description": "basket.apps",
        "peekOfCode": "class BasketConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"basket\"",
        "detail": "basket.apps",
        "documentation": {}
    },
    {
        "label": "Basket",
        "kind": 6,
        "importPath": "basket.basket",
        "description": "basket.basket",
        "peekOfCode": "class Basket:\n    \"\"\"\n    A base Basket class, providing some default behaviors that\n    can be inherited or overridden, as necessary.\n    \"\"\"\n    def __init__(self, request):\n        self.session = request.session\n        basket = self.session.get(settings.BASKET_SESSION_ID)\n        if settings.BASKET_SESSION_ID not in request.session:\n            basket = self.session[settings.BASKET_SESSION_ID] = {}",
        "detail": "basket.basket",
        "documentation": {}
    },
    {
        "label": "basket",
        "kind": 2,
        "importPath": "basket.context_processors",
        "description": "basket.context_processors",
        "peekOfCode": "def basket(request):\n    return {\"basket\": Basket(request)}",
        "detail": "basket.context_processors",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "basket.urls",
        "description": "basket.urls",
        "peekOfCode": "app_name = \"basket\"\nurlpatterns = [\n    path(\"\", views.basket_summary, name=\"basket_summary\"),\n    path(\"add/\", views.basket_add, name=\"basket_add\"),\n    path(\"delete/\", views.basket_delete, name=\"basket_delete\"),\n    path(\"update/\", views.basket_update, name=\"basket_update\"),\n]",
        "detail": "basket.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "basket.urls",
        "description": "basket.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.basket_summary, name=\"basket_summary\"),\n    path(\"add/\", views.basket_add, name=\"basket_add\"),\n    path(\"delete/\", views.basket_delete, name=\"basket_delete\"),\n    path(\"update/\", views.basket_update, name=\"basket_update\"),\n]",
        "detail": "basket.urls",
        "documentation": {}
    },
    {
        "label": "basket_summary",
        "kind": 2,
        "importPath": "basket.views",
        "description": "basket.views",
        "peekOfCode": "def basket_summary(request):\n    basket = Basket(request)\n    return render(request, \"basket/basket_summary.html\", {\"basket\": basket})\ndef basket_add(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        product_id = int(request.POST.get(\"productid\"))\n        product_qty = int(request.POST.get(\"productqty\"))\n        product = get_object_or_404(Product, id=product_id)\n        basket.add(product=product, qty=product_qty)",
        "detail": "basket.views",
        "documentation": {}
    },
    {
        "label": "basket_add",
        "kind": 2,
        "importPath": "basket.views",
        "description": "basket.views",
        "peekOfCode": "def basket_add(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        product_id = int(request.POST.get(\"productid\"))\n        product_qty = int(request.POST.get(\"productqty\"))\n        product = get_object_or_404(Product, id=product_id)\n        basket.add(product=product, qty=product_qty)\n        basketqty = basket.__len__()\n        messages.add_message(request, messages.SUCCESS, \"Added item to your basket\")\n        return JsonResponse({\"qty\": basketqty})",
        "detail": "basket.views",
        "documentation": {}
    },
    {
        "label": "basket_delete",
        "kind": 2,
        "importPath": "basket.views",
        "description": "basket.views",
        "peekOfCode": "def basket_delete(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        product_id = int(request.POST.get(\"productid\"))\n        basket.delete(product=product_id)\n        basketqty = basket.__len__()\n        baskettotal = basket.get_total_price()\n        messages.add_message(request, messages.ERROR, \"Removed item from your basket\")\n        return JsonResponse({\"qty\": basketqty, \"subtotal\": baskettotal})\ndef basket_update(request):",
        "detail": "basket.views",
        "documentation": {}
    },
    {
        "label": "basket_update",
        "kind": 2,
        "importPath": "basket.views",
        "description": "basket.views",
        "peekOfCode": "def basket_update(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        product_id = int(request.POST.get(\"productid\"))\n        product_qty = int(request.POST.get(\"productqty\"))\n        basket.update(product=product_id, qty=product_qty)\n        basketqty = basket.__len__()\n        baskettotal = basket.get_total_price()\n        messages.add_message(request, messages.SUCCESS, \"Update item in your basket\")\n        return JsonResponse({\"qty\": basketqty, \"subtotal\": baskettotal})",
        "detail": "basket.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "checkout.migrations.0001_initial",
        "description": "checkout.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DeliveryOptions',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('delivery_name', models.CharField(help_text='Required', max_length=255, verbose_name='delivery_name')),",
        "detail": "checkout.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "checkout.migrations.0002_alter_deliveryoptions_order",
        "description": "checkout.migrations.0002_alter_deliveryoptions_order",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('checkout', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='deliveryoptions',\n            name='order',\n            field=models.PositiveIntegerField(default=0, help_text='Required', verbose_name='list order'),\n        ),",
        "detail": "checkout.migrations.0002_alter_deliveryoptions_order",
        "documentation": {}
    },
    {
        "label": "CheckoutConfig",
        "kind": 6,
        "importPath": "checkout.apps",
        "description": "checkout.apps",
        "peekOfCode": "class CheckoutConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'checkout'",
        "detail": "checkout.apps",
        "documentation": {}
    },
    {
        "label": "DeliveryOptions",
        "kind": 6,
        "importPath": "checkout.models",
        "description": "checkout.models",
        "peekOfCode": "class DeliveryOptions(models.Model):\n    \"\"\"\n    The Delivery methods table contining all delivery\n    \"\"\"\n    DELIVERY_CHOICES = [\n        (\"IS\", \"In Store\"),\n        (\"HD\", \"Home Delivery\"),\n        (\"DD\", \"Digital Delivery\"),\n    ]\n    delivery_name = models.CharField(",
        "detail": "checkout.models",
        "documentation": {}
    },
    {
        "label": "PaymentSelections",
        "kind": 6,
        "importPath": "checkout.models",
        "description": "checkout.models",
        "peekOfCode": "class PaymentSelections(models.Model):\n    \"\"\"\n    Store payment options\n    \"\"\"\n    name = models.CharField(\n        verbose_name=_(\"name\"),\n        help_text=_(\"Required\"),\n        max_length=255,\n    )\n    is_active = models.BooleanField(default=True)",
        "detail": "checkout.models",
        "documentation": {}
    },
    {
        "label": "PayPalClient",
        "kind": 6,
        "importPath": "checkout.paypal",
        "description": "checkout.paypal",
        "peekOfCode": "class PayPalClient:\n    def __init__(self):\n        self.client_id = os.environ.get(\"CLIENT_ID\")\n        self.client_secret = os.environ.get(\"CLIENT_SECRET\")\n        self.environment = SandboxEnvironment(client_id=self.client_id, client_secret=self.client_secret)\n        self.client = PayPalHttpClient(self.environment)",
        "detail": "checkout.paypal",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "checkout.urls",
        "description": "checkout.urls",
        "peekOfCode": "app_name = \"checkout\"\nurlpatterns = [\n    path(\"deliverychoices\", views.deliverychoices, name=\"deliverychoices\"),\n    path(\"basket_update_delivery/\", views.basket_update_delivery, name=\"basket_update_delivery\"),\n    path(\"delivery_address/\", views.delivery_address, name=\"delivery_address\"),\n    path(\"payment_selection/\", views.payment_selection, name=\"payment_selection\"),\n    path(\"payment_complete/\", views.payment_complete, name=\"payment_complete\"),\n    path(\"payment_successful/\", views.payment_successful, name=\"payment_successful\"),\n]",
        "detail": "checkout.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "checkout.urls",
        "description": "checkout.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"deliverychoices\", views.deliverychoices, name=\"deliverychoices\"),\n    path(\"basket_update_delivery/\", views.basket_update_delivery, name=\"basket_update_delivery\"),\n    path(\"delivery_address/\", views.delivery_address, name=\"delivery_address\"),\n    path(\"payment_selection/\", views.payment_selection, name=\"payment_selection\"),\n    path(\"payment_complete/\", views.payment_complete, name=\"payment_complete\"),\n    path(\"payment_successful/\", views.payment_successful, name=\"payment_successful\"),\n]",
        "detail": "checkout.urls",
        "documentation": {}
    },
    {
        "label": "deliverychoices",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def deliverychoices(request):\n    deliveryoptions = DeliveryOptions.objects.filter(is_active=True)\n    return render(request, \"checkout/delivery_choices.html\", {\"deliveryoptions\": deliveryoptions})\n@login_required\ndef basket_update_delivery(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        delivery_option = int(request.POST.get(\"deliveryoption\"))\n        delivery_type = DeliveryOptions.objects.get(id=delivery_option)\n        updated_total_price = basket.basket_update_delivery(delivery_type.delivery_price)",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "basket_update_delivery",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def basket_update_delivery(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        delivery_option = int(request.POST.get(\"deliveryoption\"))\n        delivery_type = DeliveryOptions.objects.get(id=delivery_option)\n        updated_total_price = basket.basket_update_delivery(delivery_type.delivery_price)\n        session = request.session\n        if \"purchase\" not in request.session:\n            session[\"purchase\"] = {\n                \"delivery_id\": delivery_type.id,",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "delivery_address",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def delivery_address(request):\n    session = request.session\n    if \"purchase\" not in request.session:\n        messages.add_message(request, messages.WARNING, \"Please select a delivery option\")\n        return HttpResponseRedirect(request.META[\"HTTP_REFERER\"])\n    addresses = Address.objects.filter(customer=request.user).order_by(\"-default\")\n    if \"address\" not in request.session:\n        session[\"address\"] = {\"address_id\": str(addresses[0].id)}\n    else:\n        session[\"address\"][\"address_id\"] = str(addresses[0].id)",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "payment_selection",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def payment_selection(request):\n    session = request.session\n    if \"address\" not in request.session:\n        messages.add_message(request, messages.WARNING, \"Please select an address\")\n        return HttpResponseRedirect(request.META[\"HTTP_REFERER\"])\n    return render(request, \"checkout/payment_selection.html\", {})\n# PayPal\nfrom paypalcheckoutsdk.orders import OrdersGetRequest\nfrom .paypal import PayPalClient\n@login_required",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "payment_complete",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def payment_complete(request):\n    PPClient = PayPalClient()\n    body = json.loads(request.body)\n    data = body[\"orderID\"]\n    user_id = request.user.id\n    requestorder = OrdersGetRequest(data)\n    response = PPClient.client.execute(requestorder)\n    total_paid = response.result.purchase_units[0].amount.value\n    basket = Basket(request)\n    order = Order.objects.create(",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "payment_successful",
        "kind": 2,
        "importPath": "checkout.views",
        "description": "checkout.views",
        "peekOfCode": "def payment_successful(request):\n    basket = Basket(request)\n    basket.clear()\n    messages.add_message(request, messages.SUCCESS, \"Payment completed successfully\")\n    return render(request, \"checkout/payment_successful.html\", {})",
        "detail": "checkout.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"yourdomain.com\", \"127.0.0.1\", \"localhost\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"yourdomain.com\", \"127.0.0.1\", \"localhost\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"yourdomain.com\", \"127.0.0.1\", \"localhost\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "ALLOWED_HOSTS = [\"yourdomain.com\", \"127.0.0.1\", \"localhost\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"store\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"store\",\n    \"basket\",\n    \"account\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"core.urls\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "ROOT_URLCONF = \"core.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "WSGI_APPLICATION = \"core.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"Europe/Stockholm\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nBASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "TIME_ZONE = \"Europe/Stockholm\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nBASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nBASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nBASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "USE_TZ = True\nBASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "BASKET_SESSION_ID",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "BASKET_SESSION_ID = \"basket\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\n# Custom user model\nAUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "AUTH_USER_MODEL = \"account.Customer\"\nLOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/account/dashboard\"\nLOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "LOGIN_URL = \"/account/login/\"\n# PAYPAL\nCLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "CLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\")\nCLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "CLIENT_ID = os.environ.get(\"CLIENT_ID\")\n# Email setting\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.settings.core",
        "description": "core.settings.core",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "core.settings.core",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"store.urls\", namespace=\"store\")),\n    path(\"basket/\", include(\"basket.urls\", namespace=\"basket\")),\n    path(\"checkout/\", include(\"checkout.urls\", namespace=\"checkout\")),\n    path(\"account/\", include(\"account.urls\", namespace=\"account\")),\n    path(\"orders/\", include(\"orders.urls\", namespace=\"orders\")),\n    path(\"__debug__/\", include(debug_toolbar.urls)),\n]\nif settings.DEBUG:",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0001_initial",
        "description": "orders.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Order',\n            fields=[",
        "detail": "orders.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0002_auto_20211202_1203",
        "description": "orders.migrations.0002_auto_20211202_1203",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('orders', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='order',\n            old_name='post_code',\n            new_name='postal_code',\n        ),",
        "detail": "orders.migrations.0002_auto_20211202_1203",
        "documentation": {}
    },
    {
        "label": "OrdersConfig",
        "kind": 6,
        "importPath": "orders.apps",
        "description": "orders.apps",
        "peekOfCode": "class OrdersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'orders'",
        "detail": "orders.apps",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class Order(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"order_user\")\n    full_name = models.CharField(max_length=50)\n    email = models.EmailField(max_length=254, blank=True)\n    address1 = models.CharField(max_length=250)\n    address2 = models.CharField(max_length=250)\n    city = models.CharField(max_length=100)\n    phone = models.CharField(max_length=100)\n    postal_code = models.CharField(max_length=20)\n    country_code = models.CharField(max_length=4, blank=True)",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class OrderItem(models.Model):\n    order = models.ForeignKey(Order, related_name=\"items\", on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, related_name=\"order_items\", on_delete=models.CASCADE)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return str(self.id)",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "orders.urls",
        "description": "orders.urls",
        "peekOfCode": "app_name = \"orders\"\nurlpatterns = [\n    path(\"add/\", views.add, name=\"add\"),\n]",
        "detail": "orders.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "orders.urls",
        "description": "orders.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"add/\", views.add, name=\"add\"),\n]",
        "detail": "orders.urls",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def add(request):\n    basket = Basket(request)\n    if request.POST.get(\"action\") == \"post\":\n        order_key = request.POST.get(\"order_key\")\n        user_id = request.user.id\n        baskettotal = basket.get_total_price()\n        # Check if order exists\n        if not Order.objects.filter(order_key=order_key).exists():\n            order = Order.objects.create(\n                user_id=user_id,",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "payment_confirmation",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def payment_confirmation(data):\n    Order.objects.filter(order_key=data).update(billing_status=True)\ndef user_orders(request):\n    user_id = request.user.id\n    return Order.objects.filter(user_id=user_id).filter(billing_status=True)",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "user_orders",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def user_orders(request):\n    user_id = request.user.id\n    return Order.objects.filter(user_id=user_id).filter(billing_status=True)",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(help_text='Required and unique', max_length=255, unique=True, verbose_name='Category Name')),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0002_product_users_wishlist",
        "description": "store.migrations.0002_product_users_wishlist",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='product',\n            name='users_wishlist',\n            field=models.ManyToManyField(blank=True, related_name='user_wishlist', to=settings.AUTH_USER_MODEL),",
        "detail": "store.migrations.0002_product_users_wishlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0003_auto_20211202_0140",
        "description": "store.migrations.0003_auto_20211202_0140",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('store', '0002_product_users_wishlist'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='product',\n            name='users_wishlist',\n        ),",
        "detail": "store.migrations.0003_auto_20211202_0140",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0004_auto_20211202_0151",
        "description": "store.migrations.0004_auto_20211202_0151",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('store', '0003_auto_20211202_0140'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='product',\n            name='users_saved_items',\n        ),",
        "detail": "store.migrations.0004_auto_20211202_0151",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0005_alter_category_slug",
        "description": "store.migrations.0005_alter_category_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0004_auto_20211202_0151'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='category',\n            name='slug',\n            field=models.SlugField(default=models.CharField(help_text='Required and unique', max_length=255, unique=True, verbose_name='Category Name'), max_length=255, unique=True, verbose_name='Category safe URL'),\n        ),",
        "detail": "store.migrations.0005_alter_category_slug",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0006_alter_category_slug",
        "description": "store.migrations.0006_alter_category_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0005_alter_category_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='category',\n            name='slug',\n            field=models.SlugField(max_length=255, unique=True, verbose_name='Category safe URL'),\n        ),",
        "detail": "store.migrations.0006_alter_category_slug",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0007_alter_producttype_name",
        "description": "store.migrations.0007_alter_producttype_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0006_alter_category_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='producttype',\n            name='name',\n            field=models.CharField(help_text='Required', max_length=255, unique=True, verbose_name='Product Type'),\n        ),",
        "detail": "store.migrations.0007_alter_producttype_name",
        "documentation": {}
    },
    {
        "label": "TestCategoriesModel",
        "kind": 6,
        "importPath": "store.tests.test_models",
        "description": "store.tests.test_models",
        "peekOfCode": "class TestCategoriesModel(TestCase):\n    def setUp(self):\n        self.data1 = Category.objects.create(name=\"django\", slug=\"django\")\n    def test_category_model_entry(self):\n        \"\"\"\n        Test Category model data insertion/types/field attributes\n        \"\"\"\n        data = self.data1\n        self.assertTrue(isinstance(data, Category))\n        self.assertEqual(str(data), \"django\")",
        "detail": "store.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestProductsModel",
        "kind": 6,
        "importPath": "store.tests.test_models",
        "description": "store.tests.test_models",
        "peekOfCode": "class TestProductsModel(TestCase):\n    def setUp(self):\n        Category.objects.create(name=\"django\", slug=\"django\")\n        User.objects.create(username=\"admin\")\n        self.data1 = Product.objects.create(\n            category_id=1,\n            title=\"django beginners\",\n            created_by_id=1,\n            slug=\"django-beginners\",\n            price=\"20.00\",",
        "detail": "store.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestSkip",
        "kind": 6,
        "importPath": "store.tests.test_views",
        "description": "store.tests.test_views",
        "peekOfCode": "class TestSkip(TestCase):\n    def test_skip_example(self):\n        pass\nclass TestViewResponses(TestCase):\n    def setUp(self):\n        self.c = Client()\n        User.objects.create(username=\"admin\")\n        Category.objects.create(name=\"django\", slug=\"django\")\n        Product.objects.create(\n            category_id=1,",
        "detail": "store.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestViewResponses",
        "kind": 6,
        "importPath": "store.tests.test_views",
        "description": "store.tests.test_views",
        "peekOfCode": "class TestViewResponses(TestCase):\n    def setUp(self):\n        self.c = Client()\n        User.objects.create(username=\"admin\")\n        Category.objects.create(name=\"django\", slug=\"django\")\n        Product.objects.create(\n            category_id=1,\n            title=\"django beginners\",\n            created_by_id=1,\n            slug=\"django-beginners\",",
        "detail": "store.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ProductSpecificationInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductSpecificationInline(admin.TabularInline):\n    model = ProductSpecification\n@admin.register(ProductType)\nclass ProductTypeAdmin(admin.ModelAdmin):\n    inlines = [\n        ProductSpecificationInline,\n    ]\nclass ProductImageInline(admin.TabularInline):\n    model = ProductImage\nclass ProductSpecificationValueInline(admin.TabularInline):",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductTypeAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductTypeAdmin(admin.ModelAdmin):\n    inlines = [\n        ProductSpecificationInline,\n    ]\nclass ProductImageInline(admin.TabularInline):\n    model = ProductImage\nclass ProductSpecificationValueInline(admin.TabularInline):\n    model = ProductSpecificationValue\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductImageInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductImageInline(admin.TabularInline):\n    model = ProductImage\nclass ProductSpecificationValueInline(admin.TabularInline):\n    model = ProductSpecificationValue\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    inlines = [\n        ProductSpecificationValueInline,\n        ProductImageInline,\n    ]",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductSpecificationValueInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductSpecificationValueInline(admin.TabularInline):\n    model = ProductSpecificationValue\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    inlines = [\n        ProductSpecificationValueInline,\n        ProductImageInline,\n    ]",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    inlines = [\n        ProductSpecificationValueInline,\n        ProductImageInline,\n    ]",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"store\"",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "store.context_processors",
        "description": "store.context_processors",
        "peekOfCode": "def categories(request):\n    return {\"categories\": Category.objects.filter(level=0)}",
        "detail": "store.context_processors",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Category(MPTTModel):\n    \"\"\"\n    Category Table implimented with MPTT.\n    \"\"\"\n    name = models.CharField(\n        verbose_name=_(\"Category Name\"),\n        help_text=_(\"Required and unique\"),\n        max_length=255,\n        unique=True,\n    )",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductType",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductType(models.Model):\n    \"\"\"\n    ProductType Table will provide a list of the different types\n    of products that are for sale.\n    \"\"\"\n    name = models.CharField(verbose_name=_(\"Product Type\"), help_text=_(\"Required\"), max_length=255, unique=True)\n    is_active = models.BooleanField(default=True)\n    class Meta:\n        verbose_name = _(\"Product Type\")\n        verbose_name_plural = _(\"Product Types\")",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductSpecification",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductSpecification(models.Model):\n    \"\"\"\n    The Product Specification Table contains product\n    specification or features for the product types.\n    \"\"\"\n    product_type = models.ForeignKey(ProductType, on_delete=models.RESTRICT)\n    name = models.CharField(verbose_name=_(\"Name\"), help_text=_(\"Required\"), max_length=255)\n    class Meta:\n        verbose_name = _(\"Product Specification\")\n        verbose_name_plural = _(\"Product Specifications\")",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Product(models.Model):\n    \"\"\"\n    The Product table contining all product items.\n    \"\"\"\n    product_type = models.ForeignKey(ProductType, on_delete=models.RESTRICT)\n    category = models.ForeignKey(Category, on_delete=models.RESTRICT)\n    title = models.CharField(\n        verbose_name=_(\"title\"),\n        help_text=_(\"Required\"),\n        max_length=255,",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductSpecificationValue",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductSpecificationValue(models.Model):\n    \"\"\"\n    The Product Specification Value table holds each of the\n    products individual specification or bespoke features.\n    \"\"\"\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    specification = models.ForeignKey(ProductSpecification, on_delete=models.RESTRICT)\n    value = models.CharField(\n        verbose_name=_(\"value\"),\n        help_text=_(\"Product specification value (maximum of 255 words\"),",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductImage",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductImage(models.Model):\n    \"\"\"\n    The Product Image table.\n    \"\"\"\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name=\"product_image\")\n    image = models.ImageField(\n        verbose_name=_(\"image\"),\n        help_text=_(\"Upload a product image\"),\n        upload_to=\"images/\",\n        default=\"images/default.png\",",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "app_name = \"store\"\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"all_products\", views.product_all, name=\"product_all\"),\n    path(\"<slug:slug>\", views.product_detail, name=\"product_detail\"),\n    path(\"shop/<slug:category_slug>/\", views.category_list, name=\"category_list\"),\n]",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"all_products\", views.product_all, name=\"product_all\"),\n    path(\"<slug:slug>\", views.product_detail, name=\"product_detail\"),\n    path(\"shop/<slug:category_slug>/\", views.category_list, name=\"category_list\"),\n]",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def index(request):\n    products = Product.objects.prefetch_related(\"product_image\").filter(is_active=True)\n    return render(request, \"index.html\", {\"products\": products})\ndef category_list(request, category_slug=None):\n    category = get_object_or_404(Category, slug=category_slug)\n    products = Product.objects.filter(\n        category__in=Category.objects.get(name=category_slug).get_descendants(include_self=True)\n    )\n    return render(\n        request,",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "category_list",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def category_list(request, category_slug=None):\n    category = get_object_or_404(Category, slug=category_slug)\n    products = Product.objects.filter(\n        category__in=Category.objects.get(name=category_slug).get_descendants(include_self=True)\n    )\n    return render(\n        request,\n        \"store/category.html\",\n        {\"category\": category, \"products\": products},\n    )",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "product_all",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def product_all(request):\n    products = Product.objects.all()\n    return render(request, \"store/all_products.html\", {\"products\": products})\ndef product_detail(request, slug):\n    product = get_object_or_404(Product, slug=slug, is_active=True)\n    return render(request, \"store/product_detail.html\", {\"product\": product})",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def product_detail(request, slug):\n    product = get_object_or_404(Product, slug=slug, is_active=True)\n    return render(request, \"store/product_detail.html\", {\"product\": product})",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "os.environ[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"SECRET_KEY\"] = \"9fp%7@7ca51o!s$!&95hz1tq\"\n# paypal\nos.environ[\"CLIENT_SECRET\"] = \"EIbeu_NbDi6MTgFCZOy8BTJISfvEgxGqsLn9sO3acG9ZsBL5eptHI_KoyGC2gzx609KNE6J64wyKP0tz\"\nos.environ[\"CLIENT_ID\"] = \"ARvxiPSbJ1c43vOjO3zGx_-uHeVFlLUCdgEanFaMyTOs3nEzBqii8tNU7Rc-9zJiRuKaZtD7tZiZKgmE\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"CLIENT_SECRET\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"CLIENT_SECRET\"] = \"EIbeu_NbDi6MTgFCZOy8BTJISfvEgxGqsLn9sO3acG9ZsBL5eptHI_KoyGC2gzx609KNE6J64wyKP0tz\"\nos.environ[\"CLIENT_ID\"] = \"ARvxiPSbJ1c43vOjO3zGx_-uHeVFlLUCdgEanFaMyTOs3nEzBqii8tNU7Rc-9zJiRuKaZtD7tZiZKgmE\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"CLIENT_ID\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"CLIENT_ID\"] = \"ARvxiPSbJ1c43vOjO3zGx_-uHeVFlLUCdgEanFaMyTOs3nEzBqii8tNU7Rc-9zJiRuKaZtD7tZiZKgmE\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"core.settings.dev_debug\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]